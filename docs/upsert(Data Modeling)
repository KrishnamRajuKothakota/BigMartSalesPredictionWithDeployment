{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "#create an index\n",
        "from pinecone import Pinecone\n",
        "\n",
        "pc = Pinecone(api_key=\"pcsk_65KdEB_3qYK83nZKETac9MTrVM2Sgtyb9Jw3HSRfG7FPJGZnbZ38TVTX1uXMYJTj2fTLk1\")\n",
        "\n",
        "index_name = \"integrated-dense-py\"\n",
        "if not pc.has_index(index_name):\n",
        "  pc.create_index_for_model(\n",
        "      name=index_name,\n",
        "      cloud=\"aws\",\n",
        "      region=\"us-east-1\",\n",
        "      embed={\n",
        "          \"model\":\"llama-text-embed-v2\",\n",
        "          \"field_map\":{\"text\": \"chunk_text\"}\n",
        "      }\n",
        "  )"
      ],
      "metadata": {
        "id": "cqp-TzyN8mPJ"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# use an external embedding model to convert data to dense vectors\n",
        "from logging import disable\n",
        "from pinecone.grpc import PineconeGRPC as Pinecone\n",
        "from pinecone import ServerlessSpec\n",
        "\n",
        "pc = Pinecone(api_key=\"pcsk_65KdEB_3qYK83nZKETac9MTrVM2Sgtyb9Jw3HSRfG7FPJGZnbZ38TVTX1uXMYJTj2fTLk1\")\n",
        "index_name = \"standard-dense-py\"\n",
        "if not pc.has_index(index_name):\n",
        "  pc.create_index(\n",
        "      name=index_name,\n",
        "      vector_type = \"dense\",\n",
        "      dimension = 1536,\n",
        "      metric=\"cosine\",\n",
        "      spec=ServerlessSpec(\n",
        "          cloud=\"aws\",\n",
        "          region=\"us-east-1\"\n",
        "      ),\n",
        "      deletion_protection=\"disabled\",\n",
        "      tags={\n",
        "          \"environment\":\"development\"\n",
        "      }\n",
        "  )"
      ],
      "metadata": {
        "id": "jU0H1I1l9KwX"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#upsert and search with source text and have Pinecone convert it to sparse vectors automatically\n",
        "from pinecone import Pinecone\n",
        "\n",
        "pc = Pinecone(api_key=\"pcsk_65KdEB_3qYK83nZKETac9MTrVM2Sgtyb9Jw3HSRfG7FPJGZnbZ38TVTX1uXMYJTj2fTLk1\")\n",
        "index_name = \"integrated-sparse-py\"\n",
        "\n",
        "if not pc.has_index(index_name):\n",
        "  pc.create_index_for_model(\n",
        "      name=index_name,\n",
        "      cloud=\"aws\",\n",
        "      region=\"us-east-1\",\n",
        "      embed={\n",
        "          \"model\":\"pinecone-sparse-english-v0\",\n",
        "          \"field_map\":{\"text\":\"chunk_text\"}\n",
        "      }\n",
        "  )"
      ],
      "metadata": {
        "id": "jXCgpEpbMw6d"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#use an external embedding model to convert your data to sparse vectors\n",
        "from pinecone import Pinecone, ServerlessSpec\n",
        "\n",
        "pc= Pinecone(api_key=\"pcsk_65KdEB_3qYK83nZKETac9MTrVM2Sgtyb9Jw3HSRfG7FPJGZnbZ38TVTX1uXMYJTj2fTLk1\")\n",
        "\n",
        "index_name = \"standard-sparse-py\"\n",
        "\n",
        "if not pc.has_index(index_name):\n",
        "  pc.create_index(\n",
        "      name=index_name,\n",
        "      metric = \"dotproduct\",\n",
        "      vector_type=\"sparse\",\n",
        "      spec=ServerlessSpec(\n",
        "          cloud=\"aws\",\n",
        "          region = \"us-east-1\"\n",
        "      )\n",
        "  )"
      ],
      "metadata": {
        "id": "iZMRZSW_OnMO"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#upsert text\n",
        "import numpy as np\n",
        "from pinecone.grpc import PineconeGRPC as Pinecone\n",
        "\n",
        "pc= Pinecone(api_key=\"pcsk_65KdEB_3qYK83nZKETac9MTrVM2Sgtyb9Jw3HSRfG7FPJGZnbZ38TVTX1uXMYJTj2fTLk1\")\n",
        "index = pc.Index(host=\"https://langchain-pinecone-demo-kxacu7c.svc.aped-4627-b74a.pinecone.io\")\n",
        "\n",
        "embedding_dim = 1024\n",
        "example_vector = np.random.rand(embedding_dim).tolist()\n",
        "\n",
        "# Upsert records\n",
        "index.upsert(\n",
        "    vectors=[\n",
        "        {\n",
        "            \"id\": \"document1#chunk1\",\n",
        "            \"values\": example_vector,\n",
        "            \"metadata\": {\n",
        "                \"chunk_text\": \"First chunk of the document content...\",\n",
        "                \"document_id\": \"document1\",\n",
        "                \"document_title\": \"Introduction to Vector Databases\",\n",
        "                \"chunk_number\": 1,\n",
        "                \"document_url\": \"https://example.com/docs/document1\",\n",
        "                \"created_at\": \"2024-01-15\",\n",
        "                \"document_type\": \"tutorial\"\n",
        "            }\n",
        "        },\n",
        "        {\n",
        "            \"id\": \"document1#chunk2\",\n",
        "            \"values\": example_vector,\n",
        "            \"metadata\": {\n",
        "                \"chunk_text\": \"Second chunk of the document content...\",\n",
        "                \"document_id\": \"document1\",\n",
        "                \"document_title\": \"Introduction to Vector Databases\",\n",
        "                \"chunk_number\": 2,\n",
        "                \"document_url\": \"https://example.com/docs/document1\",\n",
        "                \"created_at\": \"2024-01-15\",\n",
        "                \"document_type\": \"tutorial\"\n",
        "            }\n",
        "        },\n",
        "        {\n",
        "            \"id\": \"document1#chunk3\",\n",
        "            \"values\": example_vector,\n",
        "            \"metadata\": {\n",
        "                \"chunk_text\": \"Third chunk of the document content...\",\n",
        "                \"document_id\": \"document1\",\n",
        "                \"document_title\": \"Introduction to Vector Databases\",\n",
        "                \"chunk_number\": 3,\n",
        "                \"document_url\": \"https://example.com/docs/document1\",\n",
        "                \"created_at\": \"2024-01-15\",\n",
        "                \"document_type\": \"tutorial\"\n",
        "            }\n",
        "        }\n",
        "    ],\n",
        "    namespace=\"example-namespace\"\n",
        ")\n"
      ],
      "metadata": {
        "id": "rBR0WRZJeGE3",
        "outputId": "95914127-4741-47d7-d771-86ed5adc5f61",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "upserted_count: 3"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#search with text\n",
        "from pinecone import Pinecone\n",
        "\n",
        "pc = Pinecone(api_key=\"pcsk_65KdEB_3qYK83nZKETac9MTrVM2Sgtyb9Jw3HSRfG7FPJGZnbZ38TVTX1uXMYJTj2fTLk1\")\n",
        "index = pc.Index(host=\"https://langchain-pinecone-demo-kxacu7c.svc.aped-4627-b74a.pinecone.io\")\n",
        "\n",
        "filtered_results = index.search(\n",
        "    namespace = \"example-namespace\",\n",
        "    query={\n",
        "        \"inputs\": {\"text\": \"what is a vector database?\"},\n",
        "        \"top_k\": 3,\n",
        "        \"filter\": {\"document_id\": \"document1\"}\n",
        "    },\n",
        "    fields=[\"chunk_text\"]\n",
        ")\n",
        "print(filtered_results)"
      ],
      "metadata": {
        "id": "2SP95A3jhqpU",
        "outputId": "7dcf2927-c260-4eac-a420-be4cc9476681",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'result': {'hits': [{'_id': 'document1#chunk1',\n",
            "                      '_score': -0.012243326753377914,\n",
            "                      'fields': {'chunk_text': 'First chunk of the document '\n",
            "                                               'content...'}}]},\n",
            " 'usage': {'embed_total_tokens': 4, 'read_units': 1}}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pinecone.grpc import PineconeGRPC as Pinecone\n",
        "\n",
        "pc = Pinecone(api_key=\"pcsk_65KdEB_3qYK83nZKETac9MTrVM2Sgtyb9Jw3HSRfG7FPJGZnbZ38TVTX1uXMYJTj2fTLk1\")\n",
        "index = pc.Index(host=\"https://langchain-pinecone-demo-kxacu7c.svc.aped-4627-b74a.pinecone.io\")\n",
        "\n",
        "chunk_ids = list(index.list(namespace=\"example-namespace\", prefix=\"document1#\"))\n",
        "if len(chunk_ids) == 1 and isinstance(chunk_ids[0], list):\n",
        "    chunk_ids = chunk_ids[0]\n",
        "print(f\"Found {len(chunk_ids)} chunks for document1\")\n",
        "\n",
        "# Fetch the complete records by ID\n",
        "if chunk_ids:\n",
        "    records = index.fetch(ids=chunk_ids, namespace='example-namespace')\n",
        "\n",
        "    for record_id, record_data in records.vectors.items():\n",
        "        print(f\"Chunk ID: {record_id}\")\n",
        "        print(f\"Chunk text: {record_data['metadata']['chunk_text']}\")\n",
        "        # Process the vector values and metadata as needed\n"
      ],
      "metadata": {
        "id": "i3yElq0BjNhw",
        "outputId": "505608f6-91b6-4965-fd7f-f77b58250be5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 3 chunks for document1\n",
            "Chunk ID: document1#chunk1\n",
            "Chunk text: First chunk of the document content...\n",
            "Chunk ID: document1#chunk3\n",
            "Chunk text: Third chunk of the document content...\n",
            "Chunk ID: document1#chunk2\n",
            "Chunk text: Second chunk of the document content...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pinecone.grpc import PineconeGRPC as Pinecone\n",
        "\n",
        "pc = Pinecone(api_key=\"pcsk_65KdEB_3qYK83nZKETac9MTrVM2Sgtyb9Jw3HSRfG7FPJGZnbZ38TVTX1uXMYJTj2fTLk1\")\n",
        "index = pc.Index(host=\"https://langchain-pinecone-demo-kxacu7c.svc.aped-4627-b74a.pinecone.io\")\n",
        "\n",
        "chunk_ids = []\n",
        "for record_id in index.list(prefix=\"document1#\", namespace=\"example-namespace\"):\n",
        "  chunk_ids.append(record_id)\n",
        "existing_vector = index.fetch(ids=['document1#chunk2'], namespace='example-namespace').vectors['document1#chunk2'].values\n",
        "if \"document1#chunk2\" in chunk_ids:\n",
        "  index.update(\n",
        "      id=\"document1#chunk2\",\n",
        "      values = existing_vector,\n",
        "      set_metadata={\n",
        "            \"document_id\": \"document1\",\n",
        "            \"document_title\": \"Introduction to Vector Databases - Revised\",\n",
        "            \"chunk_number\": 2,\n",
        "            \"chunk_text\": \"Updated second chunk content...\",\n",
        "            \"document_url\": \"https://example.com/docs/document1\",\n",
        "            \"created_at\": \"2024-01-15\",\n",
        "            \"updated_at\": \"2024-02-15\",\n",
        "            \"document_type\": \"tutorial\"\n",
        "        },\n",
        "      namespace = \"example-namespace\"\n",
        "  )\n",
        "print(\"updated chunk2 successfully\")"
      ],
      "metadata": {
        "id": "UDwdEEsZqeYf",
        "outputId": "c627e884-3524-41fa-c48a-c336d5608ad4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "updated chunk2 successfully\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "index.delete(\n",
        "    namespace=\"example-namespace\",\n",
        "    filter={\n",
        "        \"document_id\": {\"$eq\": \"document1\"},\n",
        "        \"chunk_number\": {\"$in\": [1, 3]}\n",
        "    }\n",
        ")\n",
        "\n",
        "# Delete all chunks for a document\n",
        "index.delete(\n",
        "    namespace=\"example-namespace\",\n",
        "    filter={\n",
        "        \"document_id\": {\"$eq\": \"document1\"}\n",
        "    }\n",
        ")"
      ],
      "metadata": {
        "id": "yKQv8AIztX3w",
        "outputId": "9470f0d0-6715-4573-c7ba-5741ce144d34",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": []
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "index.delete(\n",
        "    namespace=\"example-namespace\",\n",
        "    filter={\n",
        "        \"document_id\": {\"$eq\": \"document1\"}\n",
        "    }\n",
        ")\n",
        "\n",
        "print(\"Deleted existing chunks for document1\")\n",
        "\n",
        "# Step 2: Upsert the updated document chunks\n",
        "index.upsert(\n",
        "  namespace=\"example-namespace\",\n",
        "  vectors=[\n",
        "    {\n",
        "      \"id\": \"document1#chunk1\",\n",
        "      \"values\": existing_vector,\n",
        "      \"metadata\": {\n",
        "        \"document_id\": \"document1\",\n",
        "        \"document_title\": \"Introduction to Vector Databases - Updated Edition\",\n",
        "        \"chunk_number\": 1,\n",
        "        \"chunk_text\": \"Updated first chunk with new content...\",\n",
        "        \"document_url\": \"https://example.com/docs/document1\",\n",
        "        \"created_at\": \"2024-02-15\",\n",
        "        \"document_type\": \"tutorial\",\n",
        "        \"version\": \"2.0\"\n",
        "      }\n",
        "    },\n",
        "    {\n",
        "      \"id\": \"document1#chunk2\",\n",
        "      \"values\": existing_vector,\n",
        "      \"metadata\": {\n",
        "        \"document_id\": \"document1\",\n",
        "        \"document_title\": \"Introduction to Vector Databases - Updated Edition\",\n",
        "        \"chunk_number\": 2,\n",
        "        \"chunk_text\": \"Updated second chunk with new content...\",\n",
        "        \"document_url\": \"https://example.com/docs/document1\",\n",
        "        \"created_at\": \"2024-02-15\",\n",
        "        \"document_type\": \"tutorial\",\n",
        "        \"version\": \"2.0\"\n",
        "      }\n",
        "    }\n",
        "    # Add more chunks as needed for the updated document\n",
        "  ]\n",
        ")\n",
        "\n",
        "print(\"Successfully updated document1 with new chunks\")"
      ],
      "metadata": {
        "id": "r2Yj_blAtzjS",
        "outputId": "677a4645-0ab4-4065-9415-44e025bceef5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Deleted existing chunks for document1\n",
            "Successfully updated document1 with new chunks\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}